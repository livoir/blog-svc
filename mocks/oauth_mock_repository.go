// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "livoir-blog/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// OAuthRepository is an autogenerated mock type for the OAuthRepository type
type OAuthRepository struct {
	mock.Mock
}

// GetLoggedInUser provides a mock function with given fields: ctx, code
func (_m *OAuthRepository) GetLoggedInUser(ctx context.Context, code string) (*domain.OAuthUser, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetLoggedInUser")
	}

	var r0 *domain.OAuthUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.OAuthUser, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.OAuthUser); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OAuthUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRedirectLoginUrl provides a mock function with given fields: ctx, state
func (_m *OAuthRepository) GetRedirectLoginUrl(ctx context.Context, state string) string {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for GetRedirectLoginUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewOAuthRepository creates a new instance of OAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OAuthRepository {
	mock := &OAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
